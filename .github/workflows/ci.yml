name: Tests

on:
  push:
    branches: [ master, main, 'feature/**' ]
  pull_request:
    branches: [ master, main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.11']
        include:
          # Add more Python versions for main branch
          - os: ubuntu-latest
            python-version: '3.10'
            run-full: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
          - os: ubuntu-latest
            python-version: '3.12'
            run-full: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          pyproject.toml
          requirements*.txt

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git

    - name: Upgrade pip and install build tools
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install build

    - name: Install package and dependencies
      run: |
        pip install -e ".[dev]"
        pip install requests pytest-mock pytest-asyncio

    - name: Display Python and package info
      run: |
        python --version
        pip --version
        pip list

    - name: Run linting checks
      if: matrix.python-version == '3.11'
      continue-on-error: true
      run: |
        pip install flake8 black isort
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics || true
        black src/ tests/ --check --diff || true
        isort src/ tests/ --check-only --diff || true

    - name: Run core tests
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || 'dummy-key-for-tests' }}
        GEMINI_MODEL: gemini-2.0-flash-lite
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PYTHONPATH: ${{ github.workspace }}
      run: |
        # Run critical tests first
        pytest tests/test_critical.py tests/test_smoke.py -v --tb=short
        
        # Run core feature tests
        pytest tests/test_github_pr_integration_tdd.py -v --tb=short
        pytest tests/test_configuration_discovery.py -v --tb=short
        pytest tests/test_model_configuration.py -v --tb=short

    - name: Run full test suite
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || 'dummy-key-for-tests' }}
        GEMINI_MODEL: gemini-2.0-flash-lite
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest -v --tb=short

    - name: Test package building
      run: |
        python -m build
        ls -la dist/

    - name: Test entry points
      run: |
        # Test that CLI commands are available
        generate-code-review --help
        generate-meta-prompt --help
        code-review --help || true

    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          .pytest_cache/
          *.log

  check:
    name: Check All Tests Passed
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
      - name: Verify all tests passed
        run: |
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Tests failed!"
            exit 1
          fi
          echo "All tests passed!"