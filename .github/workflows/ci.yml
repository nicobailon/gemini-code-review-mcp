name: Continuous Integration

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # Minimal essential testing - pragmatic approach
  test:
    runs-on: ubuntu-latest  # Single OS for speed
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.12']  # Min/max versions only
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build pytest pytest-mock
    
    - name: Install package in development mode
      run: |
        pip install -e .
    
    - name: Run smoke tests (essential functionality only)
      run: |
        # Fast smoke tests - no external dependencies or API calls
        pytest tests/test_smoke.py tests/test_package.py -v --tb=short
    
    - name: Test package building
      run: |
        python -m build
    
    - name: Test imports and entry points
      run: |
        # Test package imports work
        python -c "import src.server; import src.generate_code_review_context; import src.ai_code_review; print('All imports successful')"
        
        # Test entry points exist (without executing - no API key needed)
        python -c "
        import pkg_resources
        eps = list(pkg_resources.iter_entry_points('console_scripts'))
        names = [ep.name for ep in eps if 'task-list' in ep.name or 'generate-code' in ep.name or 'review-with' in ep.name]
        assert len(names) >= 3, f'Missing entry points: {names}'
        print(f'Entry points verified: {names}')
        "

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run basic code quality checks
      run: |
        # Pragmatic approach - focus on critical errors only
        flake8 src/ --max-line-length=120 --ignore=E203,W503,W293,W291,F541,F811,F841,F401,E501,E128 || echo "Linting warnings detected but not blocking"
        
        # Check that Python files are syntactically valid
        python -m py_compile src/*.py
        
    - name: Test imports work
      run: |
        python -c "import sys; sys.path.insert(0, 'src'); import server, generate_code_review_context, ai_code_review; print('All imports successful')"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/
    
    - name: Check dependencies for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check